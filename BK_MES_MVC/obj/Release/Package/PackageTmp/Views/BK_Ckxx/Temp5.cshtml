
@{
    Layout = null;
}

<script src="~/Scripts/jquery.min.js"></script>

<script type="text/javascript">

    var ws;
    $(
        function () {
            $("#btnConnect").click(function () {
                $("#messageSpan").text("Connection...");
                ws = new WebSocket("ws://localhost:59461/api/WSChat?user="+$("#txtUser").val());
                ws.onopen = function () {
                    $("#messageSpan").text("Connected!");
                };
                ws.onmessage = function (result) {
                    $("#messageSpan").text(result.data);
                };
                ws.onerror = function (error) {
                    $("#messageSpan").text(error.data);
                };
                ws.onclose = function () {
                    $("#messageSpan").text("Disconnected!");
                };
            });

            $("#btnSend").click(function () {
                if (ws.readyState == WebSocket.OPEN) {
                    ws.send($("#txtToUser").val()+"|"+$("#txtInput").val());
                }
                else {
                    $("messageSpan").text("Connection is Closed!");
                }
            });
            $("#btnDisconnect").click(function () {
                ws.close();
            });
        }
    );

    //var websocket = null;
    ////判断当前浏览器是否支持WebSocket
    //if ('WebSocket' in window) {
    //    var hrefAddress = document.location.href.split("http://")[1].split("/");
    //    websocket = new WebSocket("ws://localhost:59461/api/WSChat");//设置成自己的请求地址
    //}
    //else {
    //    alert('当前浏览器 Not support websocket')
    //}
    ////连接发生错误的回调方法
    //websocket.onerror = function () {
    //    //console.log("WebSocket连接发生错误");
    //    alert("WebSocket连接发生错误");
    //};
    ////连接成功建立的回调方法
    //websocket.onopen = function () {
    //    console.log("WebSocket连接成功");
    //}
    ////接收到消息的回调方法
    //websocket.onmessage = function (event) {
    //    alert('b');
    //    console.log(JSON.parse(event.data));
    //}
    ////连接关闭的回调方法
    //websocket.onclose = function () {
    //    console.log("WebSocket连接关闭");
    //}
    ////监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
    //window.onbeforeunload = function () {
    //    closeWebSocket();
    //}
    ////关闭WebSocket连接
    //function closeWebSocket() {
    //    websocket.close();
    //}
    ////发送消息
    //function send() {
    //    //var message = document.getElementById('txtInput').value;
    //    //websocket.send(message);
    //    if (websocket.readyState == WebSocket.OPEN) {
    //        ws.send($("#txtInput").val());
    //    }
    //    else {
    //        $("messageSpan").text("Connection is Closed!");
    //    }
    //}

</script>

<fieldset>
    用户名
    <input type="text" id="txtUser" />
    <input type="button" value="连接" id="btnConnect" />
    <input type="button" value="断开" id="btnDisConnect" />
    <input type="button" value="" id="btnDisConnect" />

    <hr />
    @*发送给
        <input type="text" id="txtToUser" />
        发送消息
        <input type="text" id="txtInput" />
        <input type="button" value="发送" id="btnSend" onclick="send();" />*@
    <br />
    <span id="messageSpan" style="color:red;"></span>
</fieldset>  